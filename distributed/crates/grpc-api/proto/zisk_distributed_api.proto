syntax = "proto3";

package zisk.distributed.api.v1;

import "google/protobuf/timestamp.proto";

// ============================================================================
// gRPC Service Definition
// ============================================================================

service ZiskDistributedApi {
  // Bidirectional stream between worker(s) and coordinator
  rpc WorkerStream(stream WorkerMessage) returns (stream CoordinatorMessage);
  
  // Admin endpoints (optional, for monitoring)
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  rpc SystemStatus(SystemStatusRequest) returns (SystemStatusResponse);
  rpc StatusInfo(StatusInfoRequest) returns (StatusInfoResponse);
  rpc JobsList(JobsListRequest) returns (JobsListResponse);
  rpc JobStatus(JobStatusRequest) returns (JobStatusResponse);
  rpc WorkersList(WorkersListRequest) returns (WorkersListResponse);
  
  // Coordinator control
  rpc LaunchProof(LaunchProofRequest) returns (LaunchProofResponse);
}

// Standardized error response
message ErrorResponse {
  string code = 1;      // Error code
  string message = 2;   // Human-readable error message
}

// ============================================================================
// Admin Commands Request Messages
// ============================================================================

message HealthCheckRequest {}

message SystemStatusRequest {}

message StatusInfoRequest {}

message JobsListRequest {
  bool active_only = 1;
}

message JobStatusRequest {
  string job_id = 1;
}

message WorkersListRequest {
  bool available_only = 1;
}

message LaunchProofRequest {
  string block_id = 1;
  uint32 compute_capacity = 2;
  string input_path = 3;
  optional uint32 simulated_node = 4; // If set, indicates this is a simulated worker
}

// ============================================================================
// Admin Commands Response Messages
// ============================================================================

message HealthCheckResponse {}

message SystemStatusResponse {
  oneof result {
    SystemStatus status = 1;
    ErrorResponse error = 2;
  }
}

message SystemStatus {
  uint32 total_workers = 1;
  uint32 compute_capacity = 2;
  uint32 idle_workers = 3;
  uint32 busy_workers = 4;
  uint32 active_jobs = 5;
}

message StatusInfoResponse {
  string service_name = 1;
  string version = 2;
  uint64 uptime_seconds = 3;
  google.protobuf.Timestamp start_time = 4;
  Metrics metrics = 5;
}

// Metrics information
message Metrics {
  uint32 active_connections = 1;
}

message JobsListResponse {
  oneof result {
    JobsList jobs_list = 1;    // Success case
    ErrorResponse error = 2;   // Error case (e.g., system unavailable)
  }
}

message JobsList {
  repeated JobStatus jobs = 1;
}

message JobStatusResponse {
  oneof result {
    JobStatus job = 1;         // Success case
    ErrorResponse error = 2;   // Error case (e.g., job not found)
  }
}

message JobStatus {
  string job_id = 1;
  string block_id = 2;
  string phase = 3;
  string state = 4;
  repeated string assigned_workers = 5;
  uint64 start_time = 6;
  uint64 duration_ms = 7;
}

message WorkersListResponse {
  oneof result {
    WorkersList workers_list = 1;
    ErrorResponse error = 2;
  }
}

message WorkersList {
  repeated WorkerInfo workers = 1;
}
    
message WorkerInfo {
  string worker_id = 1;
  string state = 2;
  ComputeCapacity compute_capacity = 3;
  google.protobuf.Timestamp connected_at = 4;
  google.protobuf.Timestamp last_heartbeat = 5;
}

message LaunchProofResponse {
  oneof result {
    string job_id = 1;
    ErrorResponse error = 2;
  }
}

// ============================================================================
// STREAM MESSAGES from COORDINATOR <-> WORKER
// ============================================================================

// Messages from coordinator to worker
message CoordinatorMessage {
  oneof payload {
    Heartbeat heartbeat = 1;
    Shutdown shutdown = 2;
    WorkerRegisterResponse register_response = 3;
    ExecuteTaskRequest execute_task = 4;  
    JobCancelled job_cancelled = 5;
  }
}

// Messages from worker to coordinator
message WorkerMessage {
  oneof payload {
    HeartbeatAck heartbeat_ack = 1;
    WorkerError error = 2;
    WorkerRegisterRequest register = 3;
    WorkerReconnectRequest reconnect = 4;
    ExecuteTaskResponse execute_task_response = 5;
  }
}

message Heartbeat {
  google.protobuf.Timestamp timestamp = 1;
}

message HeartbeatAck {
  string worker_id = 1;
}

message Shutdown {
  string reason = 1;
  uint32 grace_period_seconds = 2;
}

message WorkerRegisterRequest {
  string worker_id = 1;
  ComputeCapacity compute_capacity = 2; // Maximum compute capacity of a node/cluster
}

message WorkerReconnectRequest {
  string worker_id = 1;
  ComputeCapacity compute_capacity = 2; // Maximum compute capacity of a node/cluster
  string last_known_job_id = 3;
}

message WorkerRegisterResponse {
  string worker_id = 1;
  bool accepted = 2;
  string message = 3;
  google.protobuf.Timestamp registered_at = 4;
}

message ExecuteTaskRequest {
  string worker_id = 1;
  string job_id = 2;
  TaskType task_type = 3;
  oneof params {
    ContributionParams contribution_params = 4;
    ProveParams prove_params = 5;
    AggParams agg_params = 6;
  }
}

enum TaskType {
  PARTIAL_CONTRIBUTION = 0;
  PROVE = 1;
  AGGREGATE = 2;
}

message ContributionParams {
  string block_id = 1;
  string input_path = 2;
  uint32 rank_id = 3;
  uint32 total_workers = 4;
  repeated uint32 worker_allocation = 5;
  uint32 job_compute_units = 6;
}

message ProveParams {
  repeated Challenges challenges = 1;
}

message AggParams {
  ProofList agg_proofs = 1;
  bool last_proof = 2;
  bool final_proof = 3;
  bool verify_constraints = 4;
  bool aggregation = 5;
  bool final_snark = 6;
  bool verify_proofs = 7;
  bool save_proofs = 8;
  bool test_mode = 9;
  string output_dir_path = 10;
  bool minimal_memory = 11;
}

message ExecuteTaskResponse {
  string job_id = 1;
  string worker_id = 2;
  TaskType task_type = 3;
  bool success = 4;
  string error_message = 5; // Optional error message if success is false
  oneof result_data {
    ChallengesList challenges = 6;
    ProofList proofs = 7;
    FinalProofList final_proof = 8;
  }
}

message ChallengesList {
  repeated Challenges challenges = 1;
}

message Challenges {
  uint32 worker_index = 1;
  uint32 airgroup_id = 2;
  repeated uint64 challenge = 3;
}

message ProofList {
  repeated Proof proofs = 1;
}

message Proof {
  uint32 worker_idx = 1;
  uint64 airgroup_id = 2;
  repeated uint64 values = 3;
}

message FinalProofList {
  repeated FinalProof final_proofs = 1;
}

message FinalProof {
  repeated uint64 values = 1;
}

message WorkerError {
  string worker_id = 1;
  string job_id = 2;
  string error_message = 3;
}

message ComputeCapacity {
  uint32 compute_units = 1;
}

message JobCancelled {
  string job_id = 1;
  string reason = 2;
}